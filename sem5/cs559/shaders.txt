#ifdef VS 
 
precision highp float;
attribute vec3 position;
attribute vec3 normal;
uniform mat3 normalMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
varying vec3 fNormal;

void main()
{
  fNormal = normalize(normalMatrix * normal);
  vec4 pos = modelViewMatrix * vec4(position, 1.0);
  gl_Position = projectionMatrix * pos;
}
 
#else 
 
precision highp float;
varying vec3 fPosition;
varying vec3 fNormal;
uniform float time;

const float ambient_coeff   = 0.25;
const float specular_coeff  = 2.0;
const float specular_exp    = 32.0;
const vec3  light_direction = vec3(-1.0,1.0,1.0); // stationary light
const vec3  light_color     = vec3(1.0,1.0,1.0);
const vec3  object_color    = vec3(1.0,0.6,0.0); // yellow

void main()
{
  vec3 l = normalize(light_direction);
  vec3 n = normalize(fNormal);
  vec3 h = normalize (l);
  
  vec3 ambient_color  = ambient_coeff  * object_color;
  vec3 specular_color = specular_coeff * pow(max(0.0,dot(n,h)),specular_exp) * light_color;

  float theta = time*20.0;
  
  vec3 dir1 = vec3(cos(theta),0,sin(theta)); 
  vec3 dir2 = vec3(sin(theta),0,cos(theta));
  
  float diffuse1 = pow(dot(fNormal,dir1),2.0);
  float diffuse2 = pow(dot(fNormal,dir2),2.0);
  
  vec3 col1 = diffuse1 * vec3(1,0,0) + ambient_color;
  vec3 col2 = diffuse2 * vec3(0,0,1) + specular_color;
  
  gl_FragColor = vec4(col1 + col2, 1.0);
}
 
#endif
