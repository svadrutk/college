knitr::opts_chunk$set(echo = TRUE)
# Data
treatment1 <- c(63, 56, 69, 59, 67)
treatment2 <- c(45, 60, 52, 56)
treatment3 <- c(31, 40, 44, 33, 37, 28)
# Combine data into a list
data <- list(Treatment1 = treatment1, Treatment2 = treatment2, Treatment3 = treatment3)
# Create boxplot
boxplot(data, col = c("lightblue", "lightgreen", "lightcoral"),
main = "Boxplot of REM Sleep by Treatment",
ylab = "REM Sleep (minutes)",
names = c("Treatment 1", "Treatment 2", "Treatment 3"))
# Add grid for better readability
grid()
# Add legend
legend("topright", legend = c("Treatment 1", "Treatment 2", "Treatment 3"),
fill = c("lightblue", "lightgreen", "lightcoral"))
# Calculate mean, sd, and n for each treatment
mean_treatment1 <- mean(treatment1)
sd_treatment1 <- sd(treatment1)
n_treatment1 <- length(treatment1)
mean_treatment2 <- mean(treatment2)
sd_treatment2 <- sd(treatment2)
n_treatment2 <- length(treatment2)
mean_treatment3 <- mean(treatment3)
sd_treatment3 <- sd(treatment3)
n_treatment3 <- length(treatment3)
# Calculate overall mean, sd, and N
overall_mean <- mean(c(treatment1, treatment2, treatment3))
overall_sd <- sd(c(treatment1, treatment2, treatment3))
overall_n <- length(c(treatment1, treatment2, treatment3))
# Calculate mean, sd, and n for each treatment
mean_treatment1 <- mean(treatment1)
sd_treatment1 <- sd(treatment1)
n_treatment1 <- length(treatment1)
mean_treatment2 <- mean(treatment2)
sd_treatment2 <- sd(treatment2)
n_treatment2 <- length(treatment2)
mean_treatment3 <- mean(treatment3)
sd_treatment3 <- sd(treatment3)
n_treatment3 <- length(treatment3)
# Calculate overall mean, sd, and N
overall_mean <- mean(c(treatment1, treatment2, treatment3))
overall_sd <- sd(c(treatment1, treatment2, treatment3))
overall_n <- length(c(treatment1, treatment2, treatment3))
cat("|Sample | Treatment 1 | Treatment 2 | Treatment 3 | Overall |\n")
cat("|-|-|-|-|-|\n")
cat(sprintf("| mean | %.2f | %.2f | %.2f | %.2f |\n", mean_treatment1, mean_treatment2, mean_treatment3, overall_mean))
cat(sprintf("| sd | %.2f | %.2f | %.2f | %.2f|\n", sd_treatment1, sd_treatment2, sd_treatment3, overall_sd))
cat(sprintf("| n | %d | %d | %d | %d |\n", n_treatment1, n_treatment2, n_treatment3, overall_n))
# Calculate mean, sd, and n for each treatment
mean_treatment1 <- mean(treatment1)
sd_treatment1 <- sd(treatment1)
n_treatment1 <- length(treatment1)
mean_treatment2 <- mean(treatment2)
sd_treatment2 <- sd(treatment2)
n_treatment2 <- length(treatment2)
mean_treatment3 <- mean(treatment3)
sd_treatment3 <- sd(treatment3)
n_treatment3 <- length(treatment3)
# Calculate overall mean, sd, and N
overall_mean <- mean(c(treatment1, treatment2, treatment3))
overall_sd <- sd(c(treatment1, treatment2, treatment3))
overall_n <- length(c(treatment1, treatment2, treatment3))
5(5.40 - 13.45)^2 + 4(6.40-13.45)^2 + 6(5.96 - 13.45)^2
5 * (5.40 - 13.45)^2 + 4 * (6.40-13.45)^2 + 6 *(5.96 - 13.45)^2
5 * (62.80 - 49.33)^2 + 4 * (53.25 - 49.33)^2 + 6 * (35.50 - 49.33)^2
4 * (5.4^2) + 3 * (6.4^2) + 5 * (5.96)^2
2116.283 + 417.128
15 * 13.45^2
14 * 13.45^2
2116.283/2
317,128/12
417.128/12
1058.141/34.76067
pf(6.210026)
pf(3, 15, 6.210026)
?pf
pf(6.210026, 3, 15)
1 - pf(6.210026, 3, 15)
1 - pf(30.44075, 2, 12)
df = data.frame(REM = c(treatment1, treatment2, treatment3), TRT = c(rep("treatment1", length(treatment1)), rep("treatment2", length(treatment2)), rep("treatment3", length(treatment3))))
df = data.frame(REM = c(treatment1, treatment2, treatment3), TRT = c(rep("treatment1", length(treatment1)), rep("treatment2", length(treatment2)), rep("treatment3", length(treatment3))))
df
df = data.frame(REM = c(treatment1, treatment2, treatment3), TRT = c(rep("treatment1", length(treatment1)), rep("treatment2", length(treatment2)), rep("treatment3", length(treatment3))))
dove = aov(REM ~ TRT, data = df)
df = data.frame(REM = c(treatment1, treatment2, treatment3), TRT = c(rep("treatment1", length(treatment1)), rep("treatment2", length(treatment2)), rep("treatment3", length(treatment3))))
dove = aov(REM ~ TRT, data = df)
summary(dove)
df = data.frame(REM = c(treatment1, treatment2, treatment3), TRT = c(rep("treatment1", length(treatment1)), rep("treatment2", length(treatment2)), rep("treatment3", length(treatment3))))
dove = aov(REM ~ TRT, data = df)
residuals = residuals(dove)
# Residual plot
par(mfrow = c(1, 2))  # Set up a 1x2 layout for the plots
plot(anova_model, 1, main = "Residuals vs Fitted", pch = 16, col = "blue")
df = data.frame(REM = c(treatment1, treatment2, treatment3), TRT = c(rep("treatment1", length(treatment1)), rep("treatment2", length(treatment2)), rep("treatment3", length(treatment3))))
dove = aov(REM ~ TRT, data = df)
residuals = residuals(dove)
# Residual plot
par(mfrow = c(1, 2))  # Set up a 1x2 layout for the plots
plot(dove, 1, main = "Residuals vs Fitted", pch = 16, col = "blue")
abline(h = 0, lty = 2, col = "red")  # Add a horizontal line at y = 0
# QQ plot
qqnorm(residuals, main = "QQ Plot of Residuals")
qqline(residuals, col = 2)  # Add a reference line
# Reset the layout
par(mfrow = c(1, 1))
df = data.frame(REM = c(treatment1, treatment2, treatment3), TRT = c(rep("treatment1", length(treatment1)), rep("treatment2", length(treatment2)), rep("treatment3", length(treatment3))))
dove = aov(REM ~ TRT, data = df)
qqnorm(dove$residuals)
df = data.frame(REM = c(treatment1, treatment2, treatment3), TRT = c(rep("treatment1", length(treatment1)), rep("treatment2", length(treatment2)), rep("treatment3", length(treatment3))))
dove = aov(REM ~ TRT, data = df)
qqnorm(dove$residuals)
plot(dove$residuals)
# Assuming 'anova_model' is the model obtained from the ANOVA analysis
# Obtain the relevant multiplier for Tukey method
tukey_result <- TukeyHSD(dove)
# Display the Tukey multiple comparisons
tukey_result
# Manual Calculation for Treatment 1 vs Treatment 2
mean_diff_manual <- mean_treatment1 - mean_treatment2
q_value <- qt(0.975, df = 14)  # Critical value from the t-distribution
# Assuming n1 and n2 are the sample sizes for Treatment 1 and Treatment 2
n1 <- length(treatment1)
n2 <- length(treatment2)
ms_error <- 34.76067
# Calculate standard error
se_manual <- sqrt(ms_error / n1 + ms_error / n2)
# Calculate the confidence interval
ci_lower_manual <- mean_diff_manual - q_value * se_manual
ci_upper_manual <- mean_diff_manual + q_value * se_manual
# Display manual calculation result
cat("Manual Calculation Result:\n")
cat("95% CI for Treatment 1 vs Treatment 2:", round(ci_lower_manual, 2), "-", round(ci_upper_manual, 2), "\n")
# Display result obtained from R
tukey_result$Treatment
53.25 - 62.80 + ((qf(0.05, 3, 12))/sqrt(2) * sqrt(34.76067 * (1/5) * (1/4)))
# Manual Calculation for Treatment 1 vs Treatment 2
mean_diff_manual <- mean_treatment1 - mean_treatment2
q_value <- qt(0.975, df = 14)  # Critical value from the t-distribution
# Assuming n1 and n2 are the sample sizes for Treatment 1 and Treatment 2
n1 <- length(treatment1)
n2 <- length(treatment2)
ms_error <- 34.76067
# Calculate standard error
se_manual <- sqrt(ms_error / n1 + ms_error / n2)
# Calculate the confidence interval
ci_lower_manual <- mean_diff_manual - q_value * se_manual
ci_upper_manual <- mean_diff_manual + q_value * se_manual
# Display manual calculation result
cat("Manual Calculation Result:\n")
cat("95% CI for Treatment 1 vs Treatment 2:", round(ci_lower_manual, 2), "-", round(ci_upper_manual, 2), "\n")
# Display result obtained from R
tukey_result$Treatment
53.25 - 62.80 + ((qf(0.05, 3, 12))/sqrt(2) * sqrt(34.76067 * (1/5) * (1/4)))
53.25 - 62.80 + ((qf(0.05, 2, 12))/sqrt(2) * sqrt(34.76067 * (1/5) * (1/4)))
53.25 - 62.80 + ((qf(0.05, 2, 12))/sqrt(2) * sqrt(34.76067 * (1/5) * (1/4)))
53.25 - 62.80 - ((qf(0.05, 2, 12))/sqrt(2) * sqrt(34.76067 * (1/5) * (1/4)))
tukey_result$Treatment
# Assuming 'anova_model' is the model obtained from the ANOVA analysis
# Obtain the relevant multiplier for Tukey method
tukey_result <- TukeyHSD(dove)
# Display the Tukey multiple comparisons
tukey_result
tukey_result$Treatment
letter_codes <- multcompLetters(tukey_result$diff)
install.packages("multcompLetters")
install.packages("multcompView")
letter_codes <- multcompLetters(tukey_result$diff)
library(multcompView)
letter_codes <- multcompLetters(tukey_result$diff)
library(multcompView)
tukey_result$TRT
# letter_codes <- multcompLetters(tukey_result$diff)
library(multcompView)
tukey_result$Treatment
# letter_codes <- multcompLetters(tukey_result$diff)
library(multcompView)
letter_codes <- multcompLetters(tukey_result$TRT$diff)
library(multcompView)
letter_codes <- multcompLetters(tukey_result$TRT)
library(multcompView)
letter_codes <- multcompLetters(tukey_result)
library(multcompView)
letter_codes <- multcompLetters(tukey_result$TRT[,4])
library(multcompView)
multcompLetters(tukey_result$TRT[,4])
kruskal.test(REM ~ TRT, data = df)
kruskal.test(REM ~ TRT, data = df)
pairwise_wilcox <- pairwise.wilcox.test(df$REM, df$TRT, p.adjust.method = "bonferroni")
kruskal.test(REM ~ TRT, data = df)
pairwise_wilcox <- pairwise.wilcox.test(df$TRT, df$REM, p.adjust.method = "bonferroni")
kruskal.test(REM ~ TRT, data = df)
pairwise_wilcox <- pairwise.wilcox.test(df$REM, df$TRT, p.adjust.method = "bonferroni")
# kruskal.test(REM ~ TRT, data = df)
pairwise_wilcox <- pairwise.wilcox.test(df$REM, df$TRT, p.adjust.method = "bonferroni")
kruskal.test(REM ~ TRT, data = df)
pairwise.wilcox.test(df$REM, df$TRT, p.adjust.method = "bonferroni")
kruskal.test(REM ~ TRT, data = df)
wilcox.test(df$REM, df$TRT, p.adjust.method = "bonferroni")
kruskal.test(REM ~ TRT, data = df)
wilcox.test(df$REM, p.adjust.method = "bonferroni")
kruskal.test(REM ~ TRT, data = df)
pairwise.wilcox.test(df$REM, df$TRT, p.adjust.method = "bonferroni")
kruskal.test(REM ~ TRT, data = df)
pairwise = pairwise.wilcox.test(df$REM, df$TRT, p.adjust.method = "bonferroni")
multcompLetters(pairwise$p.value)
pf(30.45, 2, 12, lower.tail=FALSE)
pf(30.45, 3, 12, lower.tail=FALSE)
pf(30.45, 1, 12, lower.tail=FALSE)
qtukey(p = (1 - 0.05), nmeans = 2, df = 12) / sqrt(2)
-20.10051 +9.55
62.80 - 53.85
62.80 - 53.25
20.10051 - 9.55
10.55051/2.179
sqrt(34.76067 * (1/2) * (1/14))
sqrt(34.76067 * (1/5) * (1/4))
10.551/2.179
sqrt(34.76067 * (1/5) * (1/4))
1.318345 * 2
plot(asthma ~ particulate)
setwd("~/Documents/college/sem5/stat324/hw")
asthma = read.csv("asthma.csv")
setwd("~/Documents/college/sem5/stat324/hw")
asthma = read.csv("asthma.csv")
particulate=c(11.6, 15.9, 15.7, 7.9, 6.3, 13.7, 13.1, 10.8, 6.0, 7.6, 14.8, 7.4, 16.2, 13.1, 11.2)
asthma=c(14.5, 16.6, 16.5, 12.6, 12.0, 15.8, 15.1, 14.2, 12.2, 13.1, 16.0, 12.9, 16.4, 15.4, 14.4)
plot(asthma ~ particulate)
particulate=c(11.6, 15.9, 15.7, 7.9, 6.3, 13.7, 13.1, 10.8, 6.0, 7.6, 14.8, 7.4, 16.2, 13.1, 11.2)
asthma=c(14.5, 16.6, 16.5, 12.6, 12.0, 15.8, 15.1, 14.2, 12.2, 13.1, 16.0, 12.9, 16.4, 15.4, 14.4)
plot(asthma ~ particulate)
plot(particulate ~ asthma)
particulate=c(11.6, 15.9, 15.7, 7.9, 6.3, 13.7, 13.1, 10.8, 6.0, 7.6, 14.8, 7.4, 16.2, 13.1, 11.2)
asthma=c(14.5, 16.6, 16.5, 12.6, 12.0, 15.8, 15.1, 14.2, 12.2, 13.1, 16.0, 12.9, 16.4, 15.4, 14.4)
plot(asthma ~ particulate)
cor(particulate, asthma)
10.3515 + (0.3753 * 13)
10.3515 + (0.3753 * 10)
1.96 * 1.1493
knitr::opts_chunk$set(echo = TRUE)
particulate = c(11.6, 15.9, 15.7, 7.9, 6.3, 13.7, 13.1, 10.8, 6.0, 7.6, 14.8, 7.4, 16.2, 13.1, 11.2)
asthma = c(14.5, 16.6, 16.5, 12.6, 12.0, 15.8, 15.1, 14.2, 12.2, 13.1, 16, 12.9, 16.4, 15.4, 14.4)
lm(asthma ~ particulate)
9.4163 + (0.4463 * 13)
particulate = c(11.6, 15.9, 15.7, 7.9, 6.3, 13.7, 13.1, 10.8, 6.0, 7.6, 14.8, 7.4, 16.2, 13.1, 11.2)
asthma = c(14.5, 16.6, 16.5, 12.6, 12.0, 15.8, 15.1, 14.2, 12.2, 13.1, 16, 12.9, 16.4, 15.4, 14.4)
summary(lm(asthma ~ particulate))
particulate = c(11.6, 15.9, 15.7, 7.9, 6.3, 13.7, 13.1, 10.8, 6.0, 7.6, 14.8, 7.4, 16.2, 13.1, 11.2)
asthma = c(14.5, 16.6, 16.5, 12.6, 12.0, 15.8, 15.1, 14.2, 12.2, 13.1, 16, 12.9, 16.4, 15.4, 14.4)
model = lm(asthma ~ particulate)
predict(model, newdata = 13, interval = "predict", level = 0.95)
particulate = c(11.6, 15.9, 15.7, 7.9, 6.3, 13.7, 13.1, 10.8, 6.0, 7.6, 14.8, 7.4, 16.2, 13.1, 11.2)
asthma = c(14.5, 16.6, 16.5, 12.6, 12.0, 15.8, 15.1, 14.2, 12.2, 13.1, 16, 12.9, 16.4, 15.4, 14.4)
model = lm(asthma ~ particulate)
new_disp = data.frame(disp = c(13))
predict(model, newdata = new_disp, interval = "predict", level = 0.95)
particulate = c(11.6, 15.9, 15.7, 7.9, 6.3, 13.7, 13.1, 10.8, 6.0, 7.6, 14.8, 7.4, 16.2, 13.1, 11.2)
asthma = c(14.5, 16.6, 16.5, 12.6, 12.0, 15.8, 15.1, 14.2, 12.2, 13.1, 16, 12.9, 16.4, 15.4, 14.4)
summary(lm(asthma ~ particulate))
1.96 * 0.1963
particulate = c(11.6, 15.9, 15.7, 7.9, 6.3, 13.7, 13.1, 10.8, 6.0, 7.6, 14.8, 7.4, 16.2, 13.1, 11.2)
asthma = c(14.5, 16.6, 16.5, 12.6, 12.0, 15.8, 15.1, 14.2, 12.2, 13.1, 16, 12.9, 16.4, 15.4, 14.4)
model = lm(asthma ~ particulate)
newdata = dataframe(particulate=13)
particulate = c(11.6, 15.9, 15.7, 7.9, 6.3, 13.7, 13.1, 10.8, 6.0, 7.6, 14.8, 7.4, 16.2, 13.1, 11.2)
asthma = c(14.5, 16.6, 16.5, 12.6, 12.0, 15.8, 15.1, 14.2, 12.2, 13.1, 16, 12.9, 16.4, 15.4, 14.4)
model = lm(asthma ~ particulate)
newdata = data.frame(particulate=13)
predict(model, newdata, interval="predict")
15.2185 - 14.7771
1.96/0.4414
0.4414/1.96
particulate = c(11.6, 15.9, 15.7, 7.9, 6.3, 13.7, 13.1, 10.8, 6.0, 7.6, 14.8, 7.4, 16.2, 13.1, 11.2)
asthma = c(14.5, 16.6, 16.5, 12.6, 12.0, 15.8, 15.1, 14.2, 12.2, 13.1, 16, 12.9, 16.4, 15.4, 14.4)
model = lm(asthma ~ particulate)
summary(model)
1.96 * 0.1963
?predict.lm
6.420 * 2.132
father = c(71.3, 65.5, 65.9, 68.6, 71.4, 68.4, 65.0, 66.3, 68.0, 67.3, 67.0, 69.3, 70.1, 66.9)
son = c(68.9, 67.5, 65.4, 68.2, 71.5, 67.6, 65.0, 67.0, 65.3, 65.5, 69.8, 70.9, 68.9, 70.2)
model = lm(son~father)
summary(model)
father = c(71.3, 65.5, 65.9, 68.6, 71.4, 68.4, 65.0, 66.3, 68.0, 67.3, 67.0, 69.3, 70.1, 66.9)
son = c(68.9, 67.5, 65.4, 68.2, 71.5, 67.6, 65.0, 67.0, 65.3, 65.5, 69.8, 70.9, 68.9, 70.2)
var(father) * var(son)
father = c(71.3, 65.5, 65.9, 68.6, 71.4, 68.4, 65.0, 66.3, 68.0, 67.3, 67.0, 69.3, 70.1, 66.9)
son = c(68.9, 67.5, 65.4, 68.2, 71.5, 67.6, 65.0, 67.0, 65.3, 65.5, 69.8, 70.9, 68.9, 70.2)
cov(father, son)
?cov
father = c(71.3, 65.5, 65.9, 68.6, 71.4, 68.4, 65.0, 66.3, 68.0, 67.3, 67.0, 69.3, 70.1, 66.9)
son = c(68.9, 67.5, 65.4, 68.2, 71.5, 67.6, 65.0, 67.0, 65.3, 65.5, 69.8, 70.9, 68.9, 70.2)
cov(father, son, method="pearson")
cov(father, son, method="pearson") * 14
cov(father, son, method="pearson") * 13
father = c(71.3, 65.5, 65.9, 68.6, 71.4, 68.4, 65.0, 66.3, 68.0, 67.3, 67.0, 69.3, 70.1, 66.9)
son = c(68.9, 67.5, 65.4, 68.2, 71.5, 67.6, 65.0, 67.0, 65.3, 65.5, 69.8, 70.9, 68.9, 70.2)
summary(lm(son ~ father))
father = c(71.3, 65.5, 65.9, 68.6, 71.4, 68.4, 65.0, 66.3, 68.0, 67.3, 67.0, 69.3, 70.1, 66.9)
son = c(68.9, 67.5, 65.4, 68.2, 71.5, 67.6, 65.0, 67.0, 65.3, 65.5, 69.8, 70.9, 68.9, 70.2)
model = lm(son ~ father)
vcov(model)
father = c(71.3, 65.5, 65.9, 68.6, 71.4, 68.4, 65.0, 66.3, 68.0, 67.3, 67.0, 69.3, 70.1, 66.9)
son = c(68.9, 67.5, 65.4, 68.2, 71.5, 67.6, 65.0, 67.0, 65.3, 65.5, 69.8, 70.9, 68.9, 70.2)
model = lm(son ~ father)
vcov(model)
summary(model)
sqrt(0.3782)
sqrt(0.7674)
16.36 - (0.876 * 10.92)
pt(-5.743)
pt(-5.743, 26)
pt(-5.743, 28)
pt(-5.743, 29)
pt(-5.743, 27)
pt(-5.743, 28)
pt(-5.743, 14)
pt(-5.743, 15)
pt(-5.743, 14)
pt(-5.743, 28)
?pt
qt(-5.743, 14)
qt(-5.743, 28)
pt(-5.743, 28)
pt(-5.743, 28)
2 * pt(-5.743, 14)
2 * (1 - pt(-5.743, 14))
1 - pt(-5.743, 14)
pt(-5.743, 14)
pt(-5.743, 14, lower.tail=FALSE)
2 * pt(-5.743, 14)
2 * pt(-5.743, 14)
pt(-5.743, 14)
pt(-5.743, 14)
2 * pt(-5.743, 14)
1 - pt(-5.743, 14)
2 * pt(-5.743, 14)
2 * pt(-5.743, 14)
pt(-5.743, 14)
pt(-5.743, 14) /2
pt(-5.743, 15)
pt(0.01, 10, lower.tail=FALSE)
qt(0.02, 10, lower.tail=FALSE)
qt(0.01, 10, lower.tail=FALSE)
250 * (25/36)
250 * (10/36)
250 * (1/36)
13^2/173
13^2/173 + (1/69) + (169/7)
observed = c(160, 70, 20)
expected = c(25/36, 10/36, 1/36)
expected = 250 * expected
result = chisq.test(observed, expected)
print(result)
observed = c(160, 70, 20)
expected_probs = c(25/36, 10/36, 1/36)
expected = 250 * expected_probs
result = chisq.test(observed, expected)
print(result)
observed = c(160, 70, 20)
expected_probs = c(25/36, 10/36, 1/36)
expected = 250 * expected_probs
result = chisq.test(observed, expected)
print(result)
observed = c(160, 70, 20)
expected_probs = c(25/36, 10/36, 1/36)
expected = 250 * expected_probs
result = chisq.test(observed, expected_probs)
print(result)
observed = c(160, 70, 20)
expected_probs = c(25/36, 10/36, 1/36)
expected = 250 * expected_probs
result = chisq.test(observed, p=expected_probs)
print(result)
data = matrix(c(11, 538, 70, 464), nrow=2, byrow=TRUE)
chisq.test(data, correct=FALSE)
# Observed counts for vaccinated and unvaccinated populations
observed_vaccinated <- c(50, 10)  # replace with your data
observed_unvaccinated <- c(30, 40)  # replace with your data
# Total counts for each group
total_vaccinated <- sum(observed_vaccinated)
total_unvaccinated <- sum(observed_unvaccinated)
# Sample proportions
p1_hat <- observed_vaccinated[1] / total_vaccinated
p2_hat <- observed_unvaccinated[1] / total_unvaccinated
# Combined sample proportion
p_hat <- (observed_vaccinated[1] + observed_unvaccinated[1]) / (total_vaccinated + total_unvaccinated)
# Sample sizes
n1 <- total_vaccinated
n2 <- total_unvaccinated
# Z-test for the equality of proportions
Z_test_statistic <- (p1_hat - p2_hat) / sqrt(p_hat * (1 - p_hat) * (1 / n1 + 1 / n2))
# Chi-squared test statistic from part (a)
chi_squared_statistic <- 4.94  # replace with the actual value from part (a)
# Verify the relation: chi^2 = Z^2
chi_squared_verify <- Z_test_statistic^2
# Print the results
cat("Z-test statistic:", Z_test_statistic, "\n")
cat("Chi-squared test statistic (from part a):", chi_squared_statistic, "\n")
cat("Chi-squared (Z^2) verification:", chi_squared_verify, "\n")
# Observed counts for vaccinated and unvaccinated populations
observed_vaccinated <- c(11, 538)  # replace with your data
observed_unvaccinated <- c(70, 464)  # replace with your data
# Total counts for each group
total_vaccinated <- sum(observed_vaccinated)
total_unvaccinated <- sum(observed_unvaccinated)
# Sample proportions
p1_hat <- observed_vaccinated[1] / total_vaccinated
p2_hat <- observed_unvaccinated[1] / total_unvaccinated
# Combined sample proportion
p_hat <- (observed_vaccinated[1] + observed_unvaccinated[1]) / (total_vaccinated + total_unvaccinated)
# Sample sizes
n1 <- total_vaccinated
n2 <- total_unvaccinated
# Z-test for the equality of proportions
Z_test_statistic <- (p1_hat - p2_hat) / sqrt(p_hat * (1 - p_hat) * (1 / n1 + 1 / n2))
# Chi-squared test statistic from part (a)
chi_squared_statistic <- 4.94  # replace with the actual value from part (a)
# Verify the relation: chi^2 = Z^2
chi_squared_verify <- Z_test_statistic^2
# Print the results
cat("Z-test statistic:", Z_test_statistic, "\n")
cat("Chi-squared test statistic (from part a):", chi_squared_statistic, "\n")
cat("Chi-squared (Z^2) verification:", chi_squared_verify, "\n")
# Observed counts for vaccinated and unvaccinated populations
observed_vaccinated <- c(11, 538)  # replace with your data
observed_unvaccinated <- c(70, 464)  # replace with your data
# Total counts for each group
total_vaccinated <- sum(observed_vaccinated)
total_unvaccinated <- sum(observed_unvaccinated)
# Sample proportions
p1_hat <- observed_vaccinated[1] / total_vaccinated
p2_hat <- observed_unvaccinated[1] / total_unvaccinated
# Combined sample proportion
p_hat <- (observed_vaccinated[1] + observed_unvaccinated[1]) / (total_vaccinated + total_unvaccinated)
# Sample sizes
n1 <- total_vaccinated
n2 <- total_unvaccinated
# Z-test for the equality of proportions
Z_test_statistic <- (p1_hat - p2_hat) / sqrt(p_hat * (1 - p_hat) * (1 / n1 + 1 / n2))
2 * pnorm(Z_test_statistic)
# Observed counts for vaccinated and unvaccinated populations
observed_vaccinated <- c(11, 538)  # replace with your data
observed_unvaccinated <- c(70, 464)  # replace with your data
# Total counts for each group
total_vaccinated <- sum(observed_vaccinated)
total_unvaccinated <- sum(observed_unvaccinated)
# Sample proportions
p1_hat <- observed_vaccinated[1] / total_vaccinated
p2_hat <- observed_unvaccinated[1] / total_unvaccinated
# Combined sample proportion
p_hat <- (observed_vaccinated[1] + observed_unvaccinated[1]) / (total_vaccinated + total_unvaccinated)
print(p_hat)
# Sample sizes
n1 <- total_vaccinated
n2 <- total_unvaccinated
# Z-test for the equality of proportions
Z_test_statistic <- (p1_hat - p2_hat) / sqrt(p_hat * (1 - p_hat) * (1 / n1 + 1 / n2))
2 * pnorm(Z_test_statistic)
