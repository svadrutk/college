# mutate(name = str_to_title(str_sub(name, 1, -2)))
prob5C <- prob5B %>% count(speaker, name)
prob5C
# ... %>%
# mutate(name = str_to_title(str_sub(name, 1, -2)))
prob5C <- prob5B %>% add_count(speaker, name)
prob5C
# ... %>%
# mutate(name = str_to_title(str_sub(name, 1, -2)))
prob5C <- prob5B %>% count(speaker, name)
prob5C
# ... %>%
# mutate(name = str_to_title(str_sub(name, 1, -2)))
prob5C <- prob5B %>% tally(speaker, name)
prob5C <- prob5B %>% count(speaker, name, n)
prob5C
# ... %>%
# mutate(name = str_to_title(str_sub(name, 1, -2)))
prob5C <- prob5B %>% count(speaker, name)
prob5C
# ... %>%
# mutate(name = str_to_title(str_sub(name, 1, -2)))
prob5C <- prob5B %>% count(speaker, name, wt=name)
prob5C <- prob5B %>% count(speaker, name, wt=n)
prob5C
# ... %>%
# mutate(name = str_to_title(str_sub(name, 1, -2)))
View(prob5B)
prob5C <- prob5B %>% count(speaker, name, wt=n)
prob5C %>% mutate(name = str_to_title(str_sub(name, 1, -2)))
prob5C <- prob5B %>% count(speaker, name, wt=n)
prob5C %>% mutate(name = str_to_title(str_sub(name, 1, -2)))
prob5C <- prob5B %>% count(speaker, name, wt=n)
prob5C <- prob5C %>% mutate(name = str_to_title(str_sub(name, 1, -2)))
prob5C
ggplot(data = prob5C) +
geom_bar(stat = "identity", mapping = aes(x = name, y = n, fill = name)) +
facet_wrap(~ speaker, nrow = 2)
ggplot(data = prob5C) +
geom_bar(stat = "identity", mapping = aes(x = name, y = n, fill = name)) +
facet_wrap(~ speaker, nrow = 2) + theme(legend.position = "right",
axis.text.x=element_blank()) + xlab("Name") + ylab("Count") + ggtitle("Number of times a person is referred to, by Speaker")
Q2A <- friends %>% group_by(speaker) %>% summarise(n = n()) %>% arrange(desc(n))
print(Q2A, n = 20)
Q2A <- friends %>% group_by(speaker) %>% summarise(n = n()) %>% arrange(desc(n))
head(Q2A, 20)
tmp <- Q2A[1:6, ]
main_characters <- tmp$speaker
main_characters
rm(tmp)
knitr::opts_chunk$set(message = FALSE, warning = FALSE, include = TRUE,
cache = TRUE, autodep = TRUE, error = TRUE)
library(tidyverse)
library(tidyjson)
devtools::install_github("sailthru/tidyjson")
install.packages("tidyjson")
## Read in the countries
countries = read_json("../../data/countries.json") %>%
pluck("..JSON",1)
## How many countries?
length(countries)
## How many elements of the first country list?
length(countries[[1]])
## Read in the countries
countries = read_json("../../data/countries.json") %>%
pluck("..JSON",1)
## How many countries?
length(countries)
## How many elements of the first country list?
length(countries[[1]])
knitr::opts_chunk$set(message = FALSE, warning = FALSE, include = TRUE,
cache = TRUE, autodep = TRUE, error = TRUE)
library(tidyverse)
library(tidyjson)
library(magrittr)
source("../../scripts/viridis.R")
## Read in the countries
countries = read_json("../../data/countries.json") %>%
pluck("..JSON",1)
## How many countries?
length(countries)
## How many elements of the first country list?
length(countries[[1]])
obj1 <- list("a", list(1, elt = "foo"))
obj2 <- list("b", list(2, elt = "bar"))
x <- list(obj1, obj2)
pluck(x, 1)
View(x)
View(countries)
prob1 = tibble(
n = countries %>%
map_int(length))
prob1 %>%
slice(10)
prob1 %>%
summarize(min = min(n), max = max(n))
View(prob1)
?map()
countries %>%
pluck(1) %>%
names()
## First country
countries %>%
pluck(1, "name")
## Second country
countries %>%
pluck(2, "name")
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
)
}
View(countries_df)
countries %>%
pluck(1, "capital")
countries %>%
pluck(2, "capital")
countries %>%
pluck(1, "capital") %>%
length()
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map_int(., pluck, "capital") %>%
map_int(length)
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map_int(., pluck, "capital") %>%
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map_int(., pluck, "capital")
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map_chr(., pluck, "capital") %>%
FUN(length)
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map_chr(., pluck, "capital")
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital")
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length)
)
}
View(countries_df)
countries_df %>% filter(num_capitals > 1)
## change to eval = TRUE and eliminate this comment when ready to knit
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length),
capitals = map(., pluck, "capital") %>%
map_chr(~{str_c(.x, collapse = "/")})
)
}
countries %>% filter(num_capitals < 1 | capitals = "")
countries %>% filter(num_capitals < 1 | capitals == "")
countries_df %>% filter(num_capitals < 1 | capitals == "")
countries_df$capitals[which(countries_df$num_capitals < 1 | countries_df$capitals == "")] <- "NA_character_"
countries_df$capitals[which(countries_df$num_capitals < 1 | countries_df$capitals == "")] <- "NA_character_"
countries_df$capitals[which(countries_df$num_capitals < 1 | countries_df$capitals == "")] <- "NA_character_"
countries_df$num_capitals[which(countries_df$num_capitals < 1 | countries_df$capitals == "")] <- 0L
countries_df$capitals[which(countries_df$num_capitals < 1 | countries_df$capitals == "")] <- "NA_character_"
countries_df$num_capitals[which(countries_df$num_capitals < 1)] <- "0L"
countries_df$capitals[which(countries_df$num_capitals < 1 | countries_df$capitals == "")] <- "NA_character_"
countries_df$num_capitals[which(countries_df$num_capitals < 1)] <- 0L
countries_df$capitals[which(countries_df$num_capitals < 1 | countries_df$capitals == "")] <- "NA_character_"
countries_df$num_capitals[which(countries_df$num_capitals < 1 | countries_df$capitals == "NA_character_")] <- 0L
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length),
capitals = map(., pluck, "capital") %>%
map_chr(~{str_c(.x, collapse = "/")}),
region = map_chr(., pluck, "region")
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length),
capitals = map(., pluck, "capital") %>%
map_chr(~{str_c(.x, collapse = "/")}),
region = map_chr(., pluck, "region"),
subregion = map_chr(., pluck, "subregion"),
un_member = map_lgl(., pluck, "un_member")
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length),
capitals = map(., pluck, "capital") %>%
map_chr(~{str_c(.x, collapse = "/")}),
region = map_chr(., pluck, "region"),
subregion = map_chr(., pluck, "subregion"),
un_member = map(., pluck, "un_member")
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length),
capitals = map(., pluck, "capital") %>%
map_chr(~{str_c(.x, collapse = "/")}),
region = map_chr(., pluck, "region"),
subregion = map_chr(., pluck, "subregion"),
un_member = map_lgl(., pluck, "unMember")
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length),
capitals = map(., pluck, "capital") %>%
map_chr(~{str_c(.x, collapse = "/")}),
region = map_chr(., pluck, "region"),
subregion = map_chr(., pluck, "subregion"),
un_member = map_lgl(., pluck, "unMember"),
num_languages = map_int(., pluck, "languages") %>% map(length)
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length),
capitals = map(., pluck, "capital") %>%
map_chr(~{str_c(.x, collapse = "/")}),
region = map_chr(., pluck, "region"),
subregion = map_chr(., pluck, "subregion"),
un_member = map_lgl(., pluck, "unMember"),
num_languages = map(., pluck, "languages") %>% map_int(length)
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length),
capitals = map(., pluck, "capital") %>%
map_chr(~{str_c(.x, collapse = "/")}),
region = map_chr(., pluck, "region"),
subregion = map_chr(., pluck, "subregion"),
un_member = map_lgl(., pluck, "unMember"),
num_languages = map(., pluck, "languages") %>% map_int(length),
languages = map(., pluck, "languages") %>% map_chr(~{str_c(.x, collapse = "/")})
)
}
FINALQ9 = countries_df %>% filter(un_member == TRUE)
View(FINALQ9)
FINALQ9 = countries_df %>% filter(un_member == TRUE) %>% group_by(subregion, region) %>% summarise(count = n())
FINALQ9 = countries_df %>% filter(un_member == TRUE) %>% group_by(subregion, region) %>% summarise(count = n())
FINALQ9
FINALQ9 = countries_df %>% filter(un_member == TRUE) %>% group_by(subregion, region) %>% mutate(count = n())
FINALQ9
FINALQ9 = countries_df %>% filter(un_member == TRUE) %>% group_by(subregion, region) %>% mutate(count = n()) %>% arrange(region, desc(count))
FINALQ9
ggplot(data = FINALQ9) +
geom_bar(mapping = aes(x = common_name, y = num_languages))
ggplot(data = FINALQ9) +
geom_bar(stat="identity", mapping = aes(x = common_name, y = num_languages))
ggplot(data = FINALQ9) +
geom_bar(stat="identity", mapping = aes(x = common_name, y = num_languages)) %>% facet_wrap(~ region, nrow = 2)
ggplot(data = FINALQ9) +
geom_bar(stat="identity", mapping = aes(x = common_name, y = num_languages))
ggplot(data = FINALQ9) +
geom_bar(stat="identity", mapping = aes(x = common_name, y = num_languages)) %>% facet_wrap(~ region, nrow = 2)
ggplot(data = FINALQ9) +
geom_bar(stat="identity", mapping = aes(x = common_name, y = num_languages)) + facet_wrap(~ region, nrow = 2)
ggplot(data = FINALQ9) +
geom_bar(stat="identity", mapping = aes(x = common_name, y = num_languages)) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = FINALQ9) +
geom_bar(stat="identity", mapping = aes(x = num_languages, y = n())) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = FINALQ9) +
geom_bar(stat="identity", mapping = aes(x = num_languages) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = FINALQ9) +
geom_bar(stat="identity", mapping = aes(x = num_languages, ) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = countries_df) +
geom_bar(mapping = aes(x = num_languages ) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = countries_df) +
geom_bar(mapping = aes(x = num_languages, y = (..count..)) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = countries_df) +
geom_bar(stat="identity", mapping = aes(x = common_name, y = num_languages)) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
knitr::opts_chunk$set(message = FALSE, warning = FALSE, include = TRUE,
cache = TRUE, autodep = TRUE, error = TRUE)
library(tidyverse)
library(tidyjson)
library(magrittr)
source("../../scripts/viridis.R")
ggplot(data = countries_df) +
geom_bar(aes(x = num_languages), fill = region) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = countries_df) +
geom_bar(aes(x = num_languages), fill = region) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
knitr::opts_chunk$set(message = FALSE, warning = FALSE, include = TRUE,
cache = TRUE, autodep = TRUE, error = TRUE)
library(tidyverse)
library(tidyjson)
library(magrittr)
source("../../scripts/viridis.R")
## Read in the countries
countries = read_json("../../data/countries.json") %>%
pluck("..JSON",1)
## How many countries?
length(countries)
## How many elements of the first country list?
length(countries[[1]])
prob1 = tibble(
n = countries %>%
map_int(length))
prob1 %>%
slice(10)
prob1 %>%
summarize(min = min(n), max = max(n))
countries %>%
pluck(1) %>%
names()
## First country
countries %>%
pluck(1, "name")
## Second country
countries %>%
pluck(2, "name")
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
)
}
countries %>%
pluck(1, "capital")
countries %>%
pluck(2, "capital")
countries %>%
pluck(1, "capital") %>%
length()
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length)
)
}
countries_df %>% filter(num_capitals > 1)
## change to eval = TRUE and eliminate this comment when ready to knit
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length),
capitals = map(., pluck, "capital") %>%
map_chr(~{str_c(.x, collapse = "/")})
)
}
countries_df$capitals[which(countries_df$num_capitals < 1 | countries_df$capitals == "")] <- "NA_character_"
countries_df$num_capitals[which(countries_df$num_capitals < 1 | countries_df$capitals == "NA_character_")] <- 0L
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length),
capitals = map(., pluck, "capital") %>%
map_chr(~{str_c(.x, collapse = "/")}),
region = map_chr(., pluck, "region"),
subregion = map_chr(., pluck, "subregion"),
un_member = map_lgl(., pluck, "unMember"),
num_languages = map(., pluck, "languages") %>% map_int(length),
languages = map(., pluck, "languages") %>% map_chr(~{str_c(.x, collapse = "/")})
)
}
FINALQ9 = countries_df %>% filter(un_member == TRUE) %>% group_by(subregion, region) %>% mutate(count = n()) %>% arrange(region, desc(count))
ggplot(data = countries_df) +
geom_bar(aes(x = num_languages), fill = region) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
FINALQ9 = countries_df %>% filter(un_member == TRUE) %>% group_by(subregion, region) %>% mutate(count = n()) %>% arrange(region, desc(count))
ggplot(data = countries_df) +
geom_bar(aes(x = num_languages), fill = region) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = countries_df) +
geom_bar(aes(x = num_languages),fill=region) + facet_wrap(~ region, nrow = 2)
ggplot(data = countries_df) +
geom_bar(aes(x = num_languages, fill=region)) + facet_wrap(~ region, nrow = 2)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(tidyverse)
source("../../scripts/viridis.R")
source("../../scripts/ggprob.R")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(tidyverse)
source("../../scripts/viridis.R")
source("../../scripts/ggprob.R")
setwd("~/College/stat240/discussion/disc08")
setwd("~/College/stat240/discussion/disc08")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(tidyverse)
source("../../scripts/viridis.R")
source("../../scripts/ggprob.R")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(tidyverse)
source("../../scripts/viridis.R")
source("../../scripts/ggprob.R")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(tidyverse)
source("../../scripts/viridis.R")
source("../../scripts/ggprob.R")
mean = mean(rbinom(25, 0.5))
gbinom(25, 0.4, a = 30, b = 70) +
geom_binom_density(25, 0.4, a = 35, b = 50, color = "gray") +
geom_binom_density(25, 0.4, a = 55, b = 70, color = "red") +
theme_minimal()
install.packages("egg")
gbinom(100, 0.5, a = 30, b = 70) +
geom_binom_density(100, 0.5, a = 35, b = 50, color = "gray") +
geom_binom_density(100, 0.5, a = 55, b = 70, color = "red") +
theme_minimal()
?pnorm
