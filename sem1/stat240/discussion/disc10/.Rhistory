tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map_chr(., pluck, "capital") %>%
FUN(length)
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map_chr(., pluck, "capital")
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital")
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length)
)
}
View(countries_df)
countries_df %>% filter(num_capitals > 1)
## change to eval = TRUE and eliminate this comment when ready to knit
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length),
capitals = map(., pluck, "capital") %>%
map_chr(~{str_c(.x, collapse = "/")})
)
}
countries %>% filter(num_capitals < 1 | capitals = "")
countries %>% filter(num_capitals < 1 | capitals == "")
countries_df %>% filter(num_capitals < 1 | capitals == "")
countries_df$capitals[which(countries_df$num_capitals < 1 | countries_df$capitals == "")] <- "NA_character_"
countries_df$capitals[which(countries_df$num_capitals < 1 | countries_df$capitals == "")] <- "NA_character_"
countries_df$capitals[which(countries_df$num_capitals < 1 | countries_df$capitals == "")] <- "NA_character_"
countries_df$num_capitals[which(countries_df$num_capitals < 1 | countries_df$capitals == "")] <- 0L
countries_df$capitals[which(countries_df$num_capitals < 1 | countries_df$capitals == "")] <- "NA_character_"
countries_df$num_capitals[which(countries_df$num_capitals < 1)] <- "0L"
countries_df$capitals[which(countries_df$num_capitals < 1 | countries_df$capitals == "")] <- "NA_character_"
countries_df$num_capitals[which(countries_df$num_capitals < 1)] <- 0L
countries_df$capitals[which(countries_df$num_capitals < 1 | countries_df$capitals == "")] <- "NA_character_"
countries_df$num_capitals[which(countries_df$num_capitals < 1 | countries_df$capitals == "NA_character_")] <- 0L
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length),
capitals = map(., pluck, "capital") %>%
map_chr(~{str_c(.x, collapse = "/")}),
region = map_chr(., pluck, "region")
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length),
capitals = map(., pluck, "capital") %>%
map_chr(~{str_c(.x, collapse = "/")}),
region = map_chr(., pluck, "region"),
subregion = map_chr(., pluck, "subregion"),
un_member = map_lgl(., pluck, "un_member")
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length),
capitals = map(., pluck, "capital") %>%
map_chr(~{str_c(.x, collapse = "/")}),
region = map_chr(., pluck, "region"),
subregion = map_chr(., pluck, "subregion"),
un_member = map(., pluck, "un_member")
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length),
capitals = map(., pluck, "capital") %>%
map_chr(~{str_c(.x, collapse = "/")}),
region = map_chr(., pluck, "region"),
subregion = map_chr(., pluck, "subregion"),
un_member = map_lgl(., pluck, "unMember")
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length),
capitals = map(., pluck, "capital") %>%
map_chr(~{str_c(.x, collapse = "/")}),
region = map_chr(., pluck, "region"),
subregion = map_chr(., pluck, "subregion"),
un_member = map_lgl(., pluck, "unMember"),
num_languages = map_int(., pluck, "languages") %>% map(length)
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length),
capitals = map(., pluck, "capital") %>%
map_chr(~{str_c(.x, collapse = "/")}),
region = map_chr(., pluck, "region"),
subregion = map_chr(., pluck, "subregion"),
un_member = map_lgl(., pluck, "unMember"),
num_languages = map(., pluck, "languages") %>% map_int(length)
)
}
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length),
capitals = map(., pluck, "capital") %>%
map_chr(~{str_c(.x, collapse = "/")}),
region = map_chr(., pluck, "region"),
subregion = map_chr(., pluck, "subregion"),
un_member = map_lgl(., pluck, "unMember"),
num_languages = map(., pluck, "languages") %>% map_int(length),
languages = map(., pluck, "languages") %>% map_chr(~{str_c(.x, collapse = "/")})
)
}
FINALQ9 = countries_df %>% filter(un_member == TRUE)
View(FINALQ9)
FINALQ9 = countries_df %>% filter(un_member == TRUE) %>% group_by(subregion, region) %>% summarise(count = n())
FINALQ9 = countries_df %>% filter(un_member == TRUE) %>% group_by(subregion, region) %>% summarise(count = n())
FINALQ9
FINALQ9 = countries_df %>% filter(un_member == TRUE) %>% group_by(subregion, region) %>% mutate(count = n())
FINALQ9
FINALQ9 = countries_df %>% filter(un_member == TRUE) %>% group_by(subregion, region) %>% mutate(count = n()) %>% arrange(region, desc(count))
FINALQ9
ggplot(data = FINALQ9) +
geom_bar(mapping = aes(x = common_name, y = num_languages))
ggplot(data = FINALQ9) +
geom_bar(stat="identity", mapping = aes(x = common_name, y = num_languages))
ggplot(data = FINALQ9) +
geom_bar(stat="identity", mapping = aes(x = common_name, y = num_languages)) %>% facet_wrap(~ region, nrow = 2)
ggplot(data = FINALQ9) +
geom_bar(stat="identity", mapping = aes(x = common_name, y = num_languages))
ggplot(data = FINALQ9) +
geom_bar(stat="identity", mapping = aes(x = common_name, y = num_languages)) %>% facet_wrap(~ region, nrow = 2)
ggplot(data = FINALQ9) +
geom_bar(stat="identity", mapping = aes(x = common_name, y = num_languages)) + facet_wrap(~ region, nrow = 2)
ggplot(data = FINALQ9) +
geom_bar(stat="identity", mapping = aes(x = common_name, y = num_languages)) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = FINALQ9) +
geom_bar(stat="identity", mapping = aes(x = num_languages, y = n())) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = FINALQ9) +
geom_bar(stat="identity", mapping = aes(x = num_languages) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = FINALQ9) +
geom_bar(stat="identity", mapping = aes(x = num_languages, ) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = countries_df) +
geom_bar(mapping = aes(x = num_languages ) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = countries_df) +
geom_bar(mapping = aes(x = num_languages, y = (..count..)) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = countries_df) +
geom_bar(stat="identity", mapping = aes(x = common_name, y = num_languages)) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
knitr::opts_chunk$set(message = FALSE, warning = FALSE, include = TRUE,
cache = TRUE, autodep = TRUE, error = TRUE)
library(tidyverse)
library(tidyjson)
library(magrittr)
source("../../scripts/viridis.R")
ggplot(data = countries_df) +
geom_bar(aes(x = num_languages), fill = region) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = countries_df) +
geom_bar(aes(x = num_languages), fill = region) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
knitr::opts_chunk$set(message = FALSE, warning = FALSE, include = TRUE,
cache = TRUE, autodep = TRUE, error = TRUE)
library(tidyverse)
library(tidyjson)
library(magrittr)
source("../../scripts/viridis.R")
## Read in the countries
countries = read_json("../../data/countries.json") %>%
pluck("..JSON",1)
## How many countries?
length(countries)
## How many elements of the first country list?
length(countries[[1]])
prob1 = tibble(
n = countries %>%
map_int(length))
prob1 %>%
slice(10)
prob1 %>%
summarize(min = min(n), max = max(n))
countries %>%
pluck(1) %>%
names()
## First country
countries %>%
pluck(1, "name")
## Second country
countries %>%
pluck(2, "name")
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
)
}
countries %>%
pluck(1, "capital")
countries %>%
pluck(2, "capital")
countries %>%
pluck(1, "capital") %>%
length()
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length)
)
}
countries_df %>% filter(num_capitals > 1)
## change to eval = TRUE and eliminate this comment when ready to knit
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length),
capitals = map(., pluck, "capital") %>%
map_chr(~{str_c(.x, collapse = "/")})
)
}
countries_df$capitals[which(countries_df$num_capitals < 1 | countries_df$capitals == "")] <- "NA_character_"
countries_df$num_capitals[which(countries_df$num_capitals < 1 | countries_df$capitals == "NA_character_")] <- 0L
countries_df = countries %>%
{
tibble(
common_name = map_chr(., pluck, "name", "common"),
official_name = map_chr(., pluck, "name", "official"),
num_capitals = map(., pluck, "capital") %>%
map_int(length),
capitals = map(., pluck, "capital") %>%
map_chr(~{str_c(.x, collapse = "/")}),
region = map_chr(., pluck, "region"),
subregion = map_chr(., pluck, "subregion"),
un_member = map_lgl(., pluck, "unMember"),
num_languages = map(., pluck, "languages") %>% map_int(length),
languages = map(., pluck, "languages") %>% map_chr(~{str_c(.x, collapse = "/")})
)
}
FINALQ9 = countries_df %>% filter(un_member == TRUE) %>% group_by(subregion, region) %>% mutate(count = n()) %>% arrange(region, desc(count))
ggplot(data = countries_df) +
geom_bar(aes(x = num_languages), fill = region) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
FINALQ9 = countries_df %>% filter(un_member == TRUE) %>% group_by(subregion, region) %>% mutate(count = n()) %>% arrange(region, desc(count))
ggplot(data = countries_df) +
geom_bar(aes(x = num_languages), fill = region) + facet_wrap(~ region, nrow = 2) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = countries_df) +
geom_bar(aes(x = num_languages),fill=region) + facet_wrap(~ region, nrow = 2)
ggplot(data = countries_df) +
geom_bar(aes(x = num_languages, fill=region)) + facet_wrap(~ region, nrow = 2)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(tidyverse)
source("../../scripts/viridis.R")
source("../../scripts/ggprob.R")
chimpanzee <- read_csv("../../data/chimpanzee.csv")
View(chimpanzee)
View(chimpanzee)
chimpanzee <- read_csv("../../data/chimpanzee.csv") %>% filter(partner == "none")
FINALQ1 <- chimpanzee <- read_csv("../../data/chimpanzee.csv") %>% filter(partner == "none")
View(FINALQ1)
chimpanzee <- read_csv("../../data/chimpanzee.csv") %>% filter(partner == "none")
chimpanzee <- read_csv("../../data/chimpanzee.csv")
FINALQ1 <- chimpanzee %>% filter(partner == "none")
chimpanzee <- read_csv("../../data/chimpanzee.csv")
FINALQ1 <- chimpanzee %>% filter(partner == "none")
sum(FINALQ1$prosocial)
chimpanzee <- read_csv("../../data/chimpanzee.csv")
FINALQ1 <- chimpanzee %>% filter(partner == "none")
sum(FINALQ1$prosocial)
sum(FINALQ1$selfish)
gbinom(6, 0.46, scale=TRUE)
gbinom(180, 0.46, scale=TRUE)
p_value = 1 - pbinom(49, 180, 0.46) # P(X > 49) = P(X >= 50)
p_value
p_value = 1 - pbinom(49, 180, 0.5) # P(X > 49) = P(X >= 50)
p_value
p_value = 1 - pbinom(49, 180, 0.05) # P(X > 49) = P(X >= 50)
p_value
p_value = 1 - pbinom(83, 180, 0.5) # P(X > 49) = P(X >= 50)
p_value
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(tidyverse)
source("../../scripts/viridis.R")
source("../../scripts/ggprob.R")
dbinom(25, 60, 0.4)
?binom
??binom
dbinom(25, 60, 0.4)
1 - pbinom(25, 60, 0.4)
1 - pbinom(24, 60, 0.4)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(tidyverse)
source("../../scripts/viridis.R")
source("../../scripts/ggprob.R")
success <- 25:60
plot(success, size=60, prob=0.4, type = 'h')
success <- 25:60
plot(success, size=60, prob=0.4, type = 's')
success <- 0:60
plot(success, size=60, prob=0.4, type = 'h')
success <- 0:60
plot(success, dbinom(success, size=60, prob=0.4), type = 'h')
gbinom(60, 0.4, a=0, b=60)
gbinom(60, 0.4, a=25, b=60)
gbinom(60, 0.4, a=0, b=60)
gbinom(60, 0.4, a=0, b=60) +
geom_binom_density(60, 0.4, a=25, b=60, color="grey")
gbinom(60, 0.4, a=0, b=60) +
geom_binom_density(60, 0.4, a=0, b=24, color="grey")
dbinom(25, 60, 0.4)
1 - pbinom(27.79, 60, 0.4) - pbinom(20.21, 60, 0.4)
pbinom(27.79, 60, 0.4) - pbinom(20.21, 60, 0.4)
pbinom(27.79, 60, 0.4) - pbinom(20.21, 60, 0.4)
pbinom(31.58, 60, 0.4) - pbinom(16.42, 60, 0.4)
pbinom(27.79, 60, 0.4) - pbinom(20.21, 60, 0.4)
pbinom(31.58, 60, 0.4) - pbinom(16.42, 60, 0.4)
pbinom(35.37, 60, 0.4) - pbinom(12.63, 60, 0.4)
gbinom(60, 0.4, a=0, b=60) +
geom_vline(xintercept=27.79, color = "red", linetype="solid")
gbinom(60, 0.4, a=0, b=60) +
geom_vline(xintercept=27.79, color = "red", linetype="solid") +
geom_vline(xintercept=20.21, color = "red", linetype="solid") +
geom_vline(xintercept=31.58, color = "red", linetype="dashed") +
geom_vline(xintercept=16.42, color = "red", linetype="dashed") +
geom_vline(xintercept=35.37, color = "red", linetype="dotted") +
geom_vline(xintercept=12.63, color = "red", linetype="dashed")
FINALQ4A <- tibble(
n = 1000:10000,
p = 0.9,
mu = n * p,
sigma = sqrt(n*p*(1-p))
)
View(FINALQ4A)
View(FINALQ4A)
FINALQ4A <- tibble(
n = 1000:10000,
p = 0.9,
mu = n * p,
sigma = sqrt(mu * (1-p))
)
FINALQ4A <- tibble(
n = 1000:10000,
p = 0.9,
mu = n * p,
sigma = sqrt(mu * (1-p)),
q.975 = qnorm(0.975),
z = (q.975 - mu)/sigma,
)
FINALQ4A <- tibble(
n = 1000:10000,
p = 0.9,
mu = n * p,
sigma = sqrt(mu * (1-p)),
q.975 = qnorm(0.975),
z = (q.975 - mu)/sigma,
prob = qnorm(1-0.975)
)
FINALQ4A <- tibble(
n = 1000:10000,
p = 0.9,
mu = n * p,
sigma = sqrt(mu * (1-p)),
q.975 = qnorm(0.975),
z = (q.975 - mu)/sigma,
prob = qbinom(0.975, n, p)
)
FINALQ4A <- tibble(
n = 1000:10000,
p = 0.9,
mu = n * p,
sigma = sqrt(mu * (1-p)),
q.975 = qnorm(0.975),
z = (q.975 - mu)/sigma,
prob = qbinom(q.975, n, p)
)
ggplot(data = FINALQ4A) +
geom_line(mapping = aes(x=n, y=z))
ggplot(data = FINALQ4A) +
geom_line(mapping = aes(x=n, y=z)) + geom_smooth()
ggplot(data = FINALQ4A) +
geom_line(mapping = aes(x=n, y=z)) + geom_smooth(mapping = aes(x=n, y=z))
ggplot(data = FINALQ4A) +
geom_point(mapping = aes(x=n, y=z)) + geom_smooth(mapping = aes(x=n, y=z))
FINALQ4A <- tibble(
n = 1000:10000,
p = 0.9,
mu = n * p,
sigma = sqrt(mu * (1-p)),
q.975 = qnorm(0.975),
z = (q.975 - mu)/sigma,
prob = qbinom(q.975, n, p)
)
FINALQ4A %>% filter(row_number() %% 1000 == 0) %>% print()
FINALQ4A <- tibble(
n = 1000:10000,
p = 0.9,
mu = n * p,
sigma = sqrt(mu * (1-p)),
q.975 = qnorm(0.975),
z = (q.975 - mu)/sigma,
prob = qbinom(q.975, n, p)
)
FINALQ4A %>% filter(row_number() %% 1000 == 1) %>% print()
FINALQ4A %>% filter(n>9000) %>% mean(z)
FINALQ4A %>% filter(n>9000)
FINALQ5C <- FINALQ4A %>% filter(n>9000)
mean(FINALQ5C$z)
?dnorm
?gnorm
gnorm(mu=500, sigma=100)
gnorm(mu=500, sigma=100, a=415.84, b=584.16)
gnorm(mu=500, sigma=100, a=-0.84, b=0.84)
gnorm(mu=500, sigma=100, a=-415, b=584)
gnorm(mu=500, sigma=100, a=415, b=584)
gnorm(mu=500, sigma=100, )
gnorm(mu=500, sigma=100, a=500)
gnorm(mu=500, sigma=100,)
gnorm(mu=500, sigma=100,) +
geom_norm_fill(500, 100, a = 415.84, b = 584.16)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(tidyverse)
install.packages(c("backports", "broom", "cli", "cpp11", "crayon", "data.table", "digest", "dtplyr", "fs", "generics", "glue", "hms", "knitr", "lifecycle", "lubridate", "mime", "pillar", "readr", "rlang", "rmarkdown", "rvest", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "cli", "cpp11", "crayon", "data.table", "digest", "dtplyr", "fs", "generics", "glue", "hms", "knitr", "lifecycle", "lubridate", "mime", "pillar", "readr", "rlang", "rmarkdown", "rvest", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "cli", "cpp11", "crayon", "data.table", "digest", "dtplyr", "fs", "generics", "glue", "hms", "knitr", "lifecycle", "lubridate", "mime", "pillar", "readr", "rlang", "rmarkdown", "rvest", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "cli", "cpp11", "crayon", "data.table", "digest", "dtplyr", "fs", "generics", "glue", "hms", "knitr", "lifecycle", "lubridate", "mime", "pillar", "readr", "rlang", "rmarkdown", "rvest", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "cli", "cpp11", "crayon", "data.table", "digest", "dtplyr", "fs", "generics", "glue", "hms", "knitr", "lifecycle", "lubridate", "mime", "pillar", "readr", "rlang", "rmarkdown", "rvest", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "cli", "cpp11", "crayon", "data.table", "digest", "dtplyr", "fs", "generics", "glue", "hms", "knitr", "lifecycle", "lubridate", "mime", "pillar", "readr", "rlang", "rmarkdown", "rvest", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "cli", "cpp11", "crayon", "data.table", "digest", "dtplyr", "fs", "generics", "glue", "hms", "knitr", "lifecycle", "lubridate", "mime", "pillar", "readr", "rlang", "rmarkdown", "rvest", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "cli", "cpp11", "crayon", "data.table", "digest", "dtplyr", "fs", "generics", "glue", "hms", "knitr", "lifecycle", "lubridate", "mime", "pillar", "readr", "rlang", "rmarkdown", "rvest", "stringi", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2"))
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
